{
	"editor.formatOnSave": true,
	"C_Cpp.intelliSenseEngine": "disabled",
	"clangd.path": "clangd", // 直接使用环境变量
	"clangd.arguments": [
		"--all-scopes-completion", // 全局补全(补全建议会给出在当前作用域不可见的索引,插入后自动补充作用域标识符),例如在main()中直接写cout,即使没有`#include <iostream>`,也会给出`std::cout`的建议,配合"--header-insertion=iwyu",还可自动插入缺失的头文件
		"--background-index", // 后台分析并保存索引文件
		"--clang-tidy", // 启用 Clang-Tidy 以提供「静态检查」，下面设置 clang tidy 规则
		"--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*",
		"--compile-commands-dir=${workspaceFolder}/build/", // 编译数据库(例如 compile_commands.json 文件)的目录位置
		"--completion-parse=auto", // 当 clangd 准备就绪时，用它来分析建议
		"--completion-style=detailed", // 建议风格：打包(重载函数只会给出一个建议);还可以设置为 detailed
		"--enable-config",
		"--fallback-style=Webkit", // 默认格式化风格: 在没找到 .clang-format 文件时采用,可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU
		"--function-arg-placeholders=true", // 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
		"--header-insertion-decorators", // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
		"--header-insertion=never", // 取消自动引入头文件, 启用的话赋值为 iwyu(include what you use)
		"--include-cleaner-stdlib", // 为标准库头文件启用清理功能(不成熟!!!)
		"--log=verbose", // 让 Clangd 生成更详细的日志
		"--pch-storage=memory", // pch 优化的位置(Memory 或 Disk,前者会增加内存开销，但会提升性能)
		"--pretty", // 输出的 JSON 文件更美观
		"--ranking-model=decision_forest", // 建议的排序方案：hueristics (启发式), decision_forest (决策树)
		"-j=12" // 同时开启的任务数量
	],
	// Clangd 找不到编译数据库(例如 compile_flags.json 文件)时采用的设置,缺陷是不能直接索引同一项目的不同文件,只能分析系统头文件、当前文件和include的文件
	"clangd.fallbackFlags": [
		"-std=c++11",
		"-I${workspaceFolder}/src/includes", //添加外部依赖
		"--target=x86_64-linux-gnu", // 默认使用window gcc(MinGW),如果你是linux，就改成"--target=x86_64-linux-gnu"
		// 配置内核头文件索引位置
		"-I/usr/src/linux-headers-6.2.0-36-generic/include",
		"-I/usr/src/linux-headers-6.2.0-36-generic/usr/include",
		"-I/usr/src/linux-headers-6.2.0-36-generic/arch/x86/include",
		"-I/usr/src/linux-headers-6.2.0-36-generic/arch/x86/include/generated",
		"-I/usr/src/linux-headers-6.2.0-36-generic/arch/ia64/include",
	],
	"cmake.sourceDirectory": "/home/huanglingang/project/linux-cpp/jsoncpp",
	"cmake.options.statusBarVisibility": "visible"
}